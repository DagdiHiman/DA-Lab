table <- read.csv('q6.csv',header=TRUE,sep=',')
table
getPred<-function(x,k){
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
#min(distance)
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
n_classes <- temp_table[1:k,3]
count_table <- table(n_classes)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
count_table
getPred<-function(x,k){
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
#min(distance)
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
n_classes <- temp_table[1:k,3]
count_table <- table(n_classes)
count_table
classes <- names(count_table)
return(classes[which.max(count_table)])
}
x_test <- data.frame("Age"=c(5,20,80),"Loan"=c(5,10000,300000))
pred1 <- apply(x_test,1,function(x) getPred(x,1))
pred2 <- apply(x_test,1,function(x) getPred(x,2))
pred3 <- apply(x_test,1,function(x) getPred(x,3))
x_test[1]
#Library Function
library(class)
y_train <- table[,3]
x_train <- table[,1:2]
pred_lib1 <- knn(train = x_train,test=x_test,cl=y_train, k = 1)
pred_lib2 <- knn(train = x_train,test=x_test,cl=y_train, k = 2)
pred_lib3 <- knn(train = x_train,test=x_test,cl=y_train, k = 3)
#comparison table
library(grid)
library(gridExtra)
par(mfrow=c(2,3))
result1 <- data.frame("Age"=x_test[,1],"Loan"=x_test[,2],"Prediction"=pred1,"Prediction_Lib"=pred_lib1)
result2 <- data.frame("Age"=x_test[,1],"Loan"=x_test[,2],"Prediction"=pred2,"Prediction_Lib"=pred_lib2)
result3 <- data.frame("Age"=x_test[,1],"Loan"=x_test[,2],"Prediction"=pred3,"Prediction_Lib"=pred_lib3)
grid.arrange(tableGrob("k=1"),tableGrob(result1),tableGrob("k=2"),tableGrob(result2),tableGrob("k=3"),tableGrob(result3))
pred_lib1 <- knn(train = x_train,test=x_test,cl=y_train, k = 1)
pred_lib2 <- knn(train = x_train,test=x_test,cl=y_train, k = 2)
pred_lib3 <- knn(train = x_train,test=x_test,cl=y_train, k = 3)
pred_lib1
pred_lib2
pred_lib2
pred_lib3
pred_lib1
pred_lib2
pred_lib3
pred_lib1[0]
data <- read.csv('salesmlr.csv')
data <- read.csv('salesmlr.csv')
x <- data[,2:3]
x$intercept <- rep(1,nrow(data))
x <- as.matrix(x)
y <- as.matrix(data$totalUnits)
#Find coefficients
b <- solve(t(x)%*%x)%*%t(x)%*%y  #coefficient vector beta = inv(x'*x)*x'*y
b
getPred <- function(x){
x <- c(x,1)
return(x%*%b)
}
x_test = data.frame("budgetNews"=c(150,300,450,600,750),"budgetTv"=c(3000,4000,5000,6000,7000))
predicted<-apply(x_test,1,getPred)
predicted
#using library function for mlr
model <- lm(totalUnits ~ budgetNews+budgetTv,data=data)
summary(model)
predictions_lib<-predict(model,x_test)
predictions_lib
#Comparison Table
library(grid)
predicted
predicted
predictions_lib
x
x <- data[,2:3]
x$intercept <- rep(1,nrow(data))
election <-  read.table('elections.csv', header=TRUE, sep=',')
election
party <- unique(election["Party"])
party
vote_count <- replicate(nrow(party), 0)
counts <- data.frame(party, vote_count)
counts
for (row in (1:nrow(counts))){
val <- counts[row, "Party"]
voter_party_x <- election[election$Party == val, ]
counts [row, "vote_count"] <- nrow(voter_party_x)
}
counts
vote_x <- counts$vote_count
vote_labels <- counts$Party
pie (vote_x, vote_labels, main="vote share") #pie chart
barplot (vote_x, names.arg = vote_labels, main="vote share") #bar plot
boxplot (vote_x,main="Party Votes Boxplot")
hist (vote_x)
boxplot (vote_x,main="Party Votes Boxplot")
predicted
predictions_lib
dataset<- read.table('q4.csv',header=TRUE,sep=',')
x_avg<-(sum(dataset$budget))/nrow(dataset)
y_avg<-(sum(dataset$sales))/nrow(dataset)
func1<-function(x){
return(x-x_avg)
}
func2<-function(y){
return(y-y_avg)
}
func3<-function(x){
return((x-x_avg)*(x-x_avg))
}
col1<- sapply(dataset$budget,func1)
col2<- sapply(dataset$sales,func2)
col3<- col1*col2
col4<-sapply(dataset$budget,func3)
numerator<-sum(col3)
denominator<-sum(col4)
beta1<- numerator/denominator
beta0<- y_avg-(beta1*x_avg)
print("Without using library functions")
print(paste("Beta0=",beta0))
print(paste("Beta1=",beta1))
pred1<-beta0+(beta1*3000)
print(paste("When budget=3000 then sales=",pred1," OK"))
#Using library functions
linearMod<-lm(sales~budget,data=dataset)
summary(linearMod)
p1 <-  as.data.frame(3000)
colnames(p1) <- "budget"
pred1 <- predict(linearMod,newdata=p1)
print(pred1)
print(paste("When budget=3000 then sales=",pred1))
p2 <-  as.data.frame(7000)
colnames(p2) <- "budget"
pred2 <- predict(linearMod,newdata=p2)
print(paste("When budget=7000 then sales=",pred2))
p3 <-  as.data.frame(8000)
colnames(p3) <- "budget"
pred3 <- predict(linearMod,newdata=p3)
print(paste("When budget=8000 then sales=",pred3))
x_test = data.frame("budget"=c(3000,7000,8000))
predictions_lib<-predict(linearMod,x_test)
predictions_lib
